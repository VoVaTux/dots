/* Generated by wayland-scanner 1.21.0 */

#ifndef NET_TAPESOFTWARE_DWL_WM_UNSTABLE_V1_CLIENT_PROTOCOL_H
#define NET_TAPESOFTWARE_DWL_WM_UNSTABLE_V1_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_net_tapesoftware_dwl_wm_unstable_v1 The net_tapesoftware_dwl_wm_unstable_v1 protocol
 * @section page_ifaces_net_tapesoftware_dwl_wm_unstable_v1 Interfaces
 * - @subpage page_iface_znet_tapesoftware_dwl_wm_v1 - control the dwl state
 * - @subpage page_iface_znet_tapesoftware_dwl_wm_monitor_v1 - control one monitor
 * @section page_copyright_net_tapesoftware_dwl_wm_unstable_v1 Copyright
 * <pre>
 *
 * Copyright (c) 2021 Raphael Robatsch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial portions
 * of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct wl_output;
struct znet_tapesoftware_dwl_wm_monitor_v1;
struct znet_tapesoftware_dwl_wm_v1;

#ifndef ZNET_TAPESOFTWARE_DWL_WM_V1_INTERFACE
#define ZNET_TAPESOFTWARE_DWL_WM_V1_INTERFACE
/**
 * @page page_iface_znet_tapesoftware_dwl_wm_v1 znet_tapesoftware_dwl_wm_v1
 * @section page_iface_znet_tapesoftware_dwl_wm_v1_desc Description
 *
 * This interface is exposed as a global in the wl_registry.
 *
 * Clients can use this protocol to receive updates of the window manager
 * state (active tags, active layout, and focused window).
 * Clients can also control this state.
 *
 * After binding, the client will receive the available tags and layouts
 * with the 'tag' and 'layout' events. These can be used in subsequent
 * dwl_wm_monitor_v1.set_tags/set_layout requests, and to interpret the
 * dwl_wm_monitor_v1.layout/tag events.
 * @section page_iface_znet_tapesoftware_dwl_wm_v1_api API
 * See @ref iface_znet_tapesoftware_dwl_wm_v1.
 */
/**
 * @defgroup iface_znet_tapesoftware_dwl_wm_v1 The znet_tapesoftware_dwl_wm_v1 interface
 *
 * This interface is exposed as a global in the wl_registry.
 *
 * Clients can use this protocol to receive updates of the window manager
 * state (active tags, active layout, and focused window).
 * Clients can also control this state.
 *
 * After binding, the client will receive the available tags and layouts
 * with the 'tag' and 'layout' events. These can be used in subsequent
 * dwl_wm_monitor_v1.set_tags/set_layout requests, and to interpret the
 * dwl_wm_monitor_v1.layout/tag events.
 */
extern const struct wl_interface znet_tapesoftware_dwl_wm_v1_interface;
#endif
#ifndef ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_INTERFACE
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_INTERFACE
/**
 * @page page_iface_znet_tapesoftware_dwl_wm_monitor_v1 znet_tapesoftware_dwl_wm_monitor_v1
 * @section page_iface_znet_tapesoftware_dwl_wm_monitor_v1_desc Description
 *
 * Observes and controls one monitor.
 *
 * Events are double-buffered: Clients should cache all events and only
 * redraw themselves once the 'frame' event is sent.
 *
 * Requests are not double-buffered: The compositor will update itself
 * immediately.
 * @section page_iface_znet_tapesoftware_dwl_wm_monitor_v1_api API
 * See @ref iface_znet_tapesoftware_dwl_wm_monitor_v1.
 */
/**
 * @defgroup iface_znet_tapesoftware_dwl_wm_monitor_v1 The znet_tapesoftware_dwl_wm_monitor_v1 interface
 *
 * Observes and controls one monitor.
 *
 * Events are double-buffered: Clients should cache all events and only
 * redraw themselves once the 'frame' event is sent.
 *
 * Requests are not double-buffered: The compositor will update itself
 * immediately.
 */
extern const struct wl_interface znet_tapesoftware_dwl_wm_monitor_v1_interface;
#endif

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 * @struct znet_tapesoftware_dwl_wm_v1_listener
 */
struct znet_tapesoftware_dwl_wm_v1_listener {
	/**
	 * announces the presence of a tag
	 *
	 * This event is sent immediately after binding. A roundtrip
	 * after binding guarantees that the client has received all tags.
	 */
	void (*tag)(void *data,
		    struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1,
		    const char *name);
	/**
	 * announces the presence of a layout
	 *
	 * This event is sent immediately after binding. A roundtrip
	 * after binding guarantees that the client has received all
	 * layouts.
	 */
	void (*layout)(void *data,
		       struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1,
		       const char *name);
};

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
static inline int
znet_tapesoftware_dwl_wm_v1_add_listener(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1,
					 const struct znet_tapesoftware_dwl_wm_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1,
				     (void (**)(void)) listener, data);
}

#define ZNET_TAPESOFTWARE_DWL_WM_V1_RELEASE 0
#define ZNET_TAPESOFTWARE_DWL_WM_V1_GET_MONITOR 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_TAG_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_LAYOUT_SINCE_VERSION 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_RELEASE_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_V1_GET_MONITOR_SINCE_VERSION 1

/** @ingroup iface_znet_tapesoftware_dwl_wm_v1 */
static inline void
znet_tapesoftware_dwl_wm_v1_set_user_data(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1, user_data);
}

/** @ingroup iface_znet_tapesoftware_dwl_wm_v1 */
static inline void *
znet_tapesoftware_dwl_wm_v1_get_user_data(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1);
}

static inline uint32_t
znet_tapesoftware_dwl_wm_v1_get_version(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1);
}

/** @ingroup iface_znet_tapesoftware_dwl_wm_v1 */
static inline void
znet_tapesoftware_dwl_wm_v1_destroy(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1)
{
	wl_proxy_destroy((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 *
 * This request indicates that the client will not use the dwl_wm
 * object any more. Objects that have been created through this instance
 * are not affected.
 */
static inline void
znet_tapesoftware_dwl_wm_v1_release(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1)
{
	wl_proxy_marshal_flags((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1,
			 ZNET_TAPESOFTWARE_DWL_WM_V1_RELEASE, NULL, wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_v1
 *
 * Gets a dwl monitor for the specified output. The window manager
 * state on the output can be controlled using the monitor.
 */
static inline struct znet_tapesoftware_dwl_wm_monitor_v1 *
znet_tapesoftware_dwl_wm_v1_get_monitor(struct znet_tapesoftware_dwl_wm_v1 *znet_tapesoftware_dwl_wm_v1, struct wl_output *output)
{
	struct wl_proxy *id;

	id = wl_proxy_marshal_flags((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1,
			 ZNET_TAPESOFTWARE_DWL_WM_V1_GET_MONITOR, &znet_tapesoftware_dwl_wm_monitor_v1_interface, wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_v1), 0, NULL, output);

	return (struct znet_tapesoftware_dwl_wm_monitor_v1 *) id;
}

#ifndef ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ENUM
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ENUM
enum znet_tapesoftware_dwl_wm_monitor_v1_tag_state {
	/**
	 * no state
	 */
	ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_NONE = 0,
	/**
	 * tag is active
	 */
	ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ACTIVE = 1,
	/**
	 * tag has at least one urgent client
	 */
	ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_URGENT = 2,
};
#endif /* ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_STATE_ENUM */

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 * @struct znet_tapesoftware_dwl_wm_monitor_v1_listener
 */
struct znet_tapesoftware_dwl_wm_monitor_v1_listener {
	/**
	 * updates the selected state of the monitor
	 *
	 * If 'selected' is nonzero, this monitor is the currently
	 * selected one.
	 */
	void (*selected)(void *data,
			 struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1,
			 uint32_t selected);
	/**
	 * updates the state of one tag
	 *
	 * Announces the update of a tag. num_clients and focused_client
	 * can be used to draw client indicators.
	 * @param tag index of a tag received by the dwl_wm_v1.tag event.
	 * @param num_clients number of clients on this tag
	 * @param focused_client out of num_clients. -1 if there is no focused client
	 */
	void (*tag)(void *data,
		    struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1,
		    uint32_t tag,
		    uint32_t state,
		    uint32_t num_clients,
		    int32_t focused_client);
	/**
	 * updates the selected layout
	 *
	 * Announces the update of the selected layout.
	 * @param layout index of a layout received by the dwl_wm_v1.layout event.
	 */
	void (*layout)(void *data,
		       struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1,
		       uint32_t layout);
	/**
	 * updates the focused client
	 *
	 * Announces the update of the selected client.
	 */
	void (*title)(void *data,
		      struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1,
		      const char *title);
	/**
	 * end of status update sequence
	 *
	 * Sent after all other events belonging to the status update has
	 * been sent. Clients should redraw themselves now.
	 */
	void (*frame)(void *data,
		      struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1);
};

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
static inline int
znet_tapesoftware_dwl_wm_monitor_v1_add_listener(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1,
						 const struct znet_tapesoftware_dwl_wm_monitor_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1,
				     (void (**)(void)) listener, data);
}

#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_RELEASE 0
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_TAGS 1
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_CLIENT_TAGS 2
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_LAYOUT 3

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SELECTED_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TAG_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_LAYOUT_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_TITLE_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_FRAME_SINCE_VERSION 1

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_RELEASE_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_TAGS_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_CLIENT_TAGS_SINCE_VERSION 1
/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 */
#define ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_LAYOUT_SINCE_VERSION 1

/** @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_set_user_data(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1, user_data);
}

/** @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1 */
static inline void *
znet_tapesoftware_dwl_wm_monitor_v1_get_user_data(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1);
}

static inline uint32_t
znet_tapesoftware_dwl_wm_monitor_v1_get_version(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1);
}

/** @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_destroy(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1)
{
	wl_proxy_destroy((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 *
 * This request indicates that the client is done with this dwl_monitor.
 * All further requests are ignored.
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_release(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1)
{
	wl_proxy_marshal_flags((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1,
			 ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_RELEASE, NULL, wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1), WL_MARSHAL_FLAG_DESTROY);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 *
 * Changes are applied immediately.
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_set_tags(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1, uint32_t tagmask, uint32_t toggle_tagset)
{
	wl_proxy_marshal_flags((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1,
			 ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_TAGS, NULL, wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1), 0, tagmask, toggle_tagset);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 *
 * tags are updated as follows:
 * new_tags = (current_tags AND and_tags) XOR xor_tags
 *
 * Changes are applied immediately.
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_set_client_tags(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1, uint32_t and_tags, uint32_t xor_tags)
{
	wl_proxy_marshal_flags((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1,
			 ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_CLIENT_TAGS, NULL, wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1), 0, and_tags, xor_tags);
}

/**
 * @ingroup iface_znet_tapesoftware_dwl_wm_monitor_v1
 *
 * Changes are applied immediately.
 */
static inline void
znet_tapesoftware_dwl_wm_monitor_v1_set_layout(struct znet_tapesoftware_dwl_wm_monitor_v1 *znet_tapesoftware_dwl_wm_monitor_v1, uint32_t layout)
{
	wl_proxy_marshal_flags((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1,
			 ZNET_TAPESOFTWARE_DWL_WM_MONITOR_V1_SET_LAYOUT, NULL, wl_proxy_get_version((struct wl_proxy *) znet_tapesoftware_dwl_wm_monitor_v1), 0, layout);
}

#ifdef  __cplusplus
}
#endif

#endif
